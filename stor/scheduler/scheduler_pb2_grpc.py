# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import scheduler_pb2 as scheduler__pb2


class SchedulerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetCephConf = channel.unary_unary(
        '/Scheduler/GetCephConf',
        request_serializer=scheduler__pb2.StorageLocation.SerializeToString,
        response_deserializer=scheduler__pb2.CephConf.FromString,
        )
    self.AppendCephMonitor = channel.unary_unary(
        '/Scheduler/AppendCephMonitor',
        request_serializer=scheduler__pb2.SRequest.SerializeToString,
        response_deserializer=scheduler__pb2.SResponse.FromString,
        )


class SchedulerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetCephConf(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AppendCephMonitor(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetCephConf': grpc.unary_unary_rpc_method_handler(
          servicer.GetCephConf,
          request_deserializer=scheduler__pb2.StorageLocation.FromString,
          response_serializer=scheduler__pb2.CephConf.SerializeToString,
      ),
      'AppendCephMonitor': grpc.unary_unary_rpc_method_handler(
          servicer.AppendCephMonitor,
          request_deserializer=scheduler__pb2.SRequest.FromString,
          response_serializer=scheduler__pb2.SResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Scheduler', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
